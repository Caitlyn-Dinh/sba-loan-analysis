# Import essential libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# Set up plotting
plt.style.use('default')
sns.set_palette("husl")

# Load data
df = pd.read_csv('/Users/caitlyndinh/ai-academy/FinalProject/merged_with_naics.csv', low_memory=False)

print("VISUAL EXPLORATORY ANALYSIS")
print("=" * 50)

# Clean key numeric columns
df['GrossApproval'] = pd.to_numeric(df['GrossApproval'], errors='coerce')
df['JobsSupported'] = pd.to_numeric(df['JobsSupported'], errors='coerce')
df['GrossChargeOffAmount'] = pd.to_numeric(df['GrossChargeOffAmount'], errors='coerce')

# ======================
# Plot 1: Top 10 NAICS Industries by Loan Count
# ======================
top_naics = df['NaicsDescription'].value_counts().dropna().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(y=top_naics.index, x=top_naics.values)
plt.title("Top 10 Industries by Loan Count")
plt.xlabel("Loan Count")
plt.ylabel("NAICS Description")
plt.tight_layout()
plt.show()

# ======================
# Plot 2: Distribution of Gross Loan Amounts (Log Scale)
# ======================
plt.figure(figsize=(8, 5))
sns.histplot(df['GrossApproval'], bins=100, kde=True, log_scale=(True, False))
plt.title("Distribution of Gross Loan Approvals (Log Scale)")
plt.xlabel("GrossApproval ($)")
plt.tight_layout()
plt.show()

# ======================
# Plot 3: Loans by Fiscal Year
# ======================
if 'ApprovalFiscalYear' in df.columns:
    plt.figure(figsize=(10, 5))
    year_counts = df['ApprovalFiscalYear'].value_counts().sort_index()
    sns.barplot(x=year_counts.index.astype(str), y=year_counts.values)
    plt.title("Number of Loans by Fiscal Year")
    plt.xlabel("Fiscal Year")
    plt.ylabel("Number of Loans")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# ======================
# Plot 4: Charge-Off Amount Distribution (Log Scale)
# ======================
if 'LoanStatus' in df.columns:
    chargeoffs = df[df['LoanStatus'] == 'CHGOFF']
    plt.figure(figsize=(8, 5))
    sns.histplot(chargeoffs['GrossChargeOffAmount'], bins=50, kde=True, log_scale=(True, False))
    plt.title("Distribution of Charge-Off Amounts (Log Scale)")
    plt.xlabel("GrossChargeOffAmount ($)")
    plt.tight_layout()
    plt.show()

# ======================
# Plot 5: Charge-Off Rates by Industry
# ======================
industry_chargeoff = df.groupby('NaicsDescription')['ChargeOffDate'].apply(lambda x: x.notna().mean()).sort_values(ascending=False).head(10)

plt.figure(figsize=(10, 6))
sns.barplot(x=industry_chargeoff.values, y=industry_chargeoff.index)
plt.title('Top 10 Industries with Highest Charge-Off Rates')
plt.xlabel('Charge-Off Rate')
plt.ylabel('NAICS Description')
plt.tight_layout()
plt.show()

# ======================
# Plot 6: Defaulted vs Non-Defaulted Loan Amounts
# ======================

df['Defaulted'] = df['ChargeOffDate'].notna()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='Defaulted', y='GrossApproval', showfliers=False)
plt.title('Loan Amounts: Defaulted vs Non-Defaulted')
plt.xlabel('Defaulted (Charge-Off)')
plt.ylabel('Loan Amount')
plt.yscale('log')
plt.tight_layout()
plt.show()

# ======================
# Plot 7: State-wise Loan Disbursement (Top 15 States)
# ======================

top_states = df['BorrState'].value_counts().nlargest(15)

plt.figure(figsize=(10, 6))
sns.barplot(x=top_states.index, y=top_states.values)
plt.title('Top 15 States by Number of Loans')
plt.xlabel('State')
plt.ylabel('Number of Loans')
plt.tight_layout()
plt.show()

# ======================
# Plot 8: Heat Map
# ======================

# Step 1: Define potential numeric columns
numeric_cols = [
    'GrossApproval',
    'SBAGuaranteedApproval',
    'InitialInterestRate',
    'TermInMonths',
    'CongressionalDistrict',
    'BusinessAge',
    'GrossChargeOffAmount',
    'JobsSupported'
]

# Step 2: Convert to numeric safely
heatmap_df = df[numeric_cols].apply(pd.to_numeric, errors='coerce')

# Step 3: Drop constant columns (zero variance)
heatmap_df = heatmap_df.loc[:, heatmap_df.nunique() > 1]

# Step 4: Drop rows with missing values
heatmap_df.dropna(inplace=True)

# Step 5: Calculate and plot correlation matrix
corr_matrix = heatmap_df.corr()

plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5)
plt.title("SBA Loan Numeric Feature Correlation Heatmap")
plt.tight_layout()
plt.show()


print("\n Visual EDA complete.")
